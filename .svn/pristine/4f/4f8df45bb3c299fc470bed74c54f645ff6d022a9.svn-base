package gov.gwssi.pdfSign;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.jws.WebService;

import com.esa2000.NXServerSignShell;
import com.esa2000.pdfsign.util.NXServerSignShellUtils;
import com.fr.base.FRContext;
import com.fr.dav.LocalEnv;
import com.fr.general.ModuleContext;
import com.fr.io.TemplateWorkBookIO;
import com.fr.io.exporter.PDFExporter;
import com.fr.main.TemplateWorkBook;
import com.fr.main.workbook.ResultWorkBook;
import com.fr.report.module.EngineModule;
import com.fr.stable.WriteActor;
import com.fr.third.org.hsqldb.lib.StringUtil;

import gov.gwssi.util.Conver2Pdf;
import gov.gwssi.util.DBUtil;

@WebService
public class PDFSignImpl {

	/**
	 * 流水号生成
	 * @return
	 */
	public static String getUUID() { // 32位
		UUID uuid = UUID.randomUUID();
		String str = uuid.toString();
		// 去掉"-"符号
		String temp = str.substring(0, 8) + str.substring(9, 13)
				+ str.substring(14, 17);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmssSSS");
		String time = formatter.format(new Date());
		return temp + time;
	}


	public static void signWtxc(String xcbhs) throws Exception {
		Connection conn = DBUtil.initDs().getConnection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		
		try {
			String wsPDFPath = searchXtpz("wsPDFPath", "01", conn);// 查询文书保存路径
			String savePath = searchXtpz("signedPath", "01", conn);// 查询签章后文书保存路径
			String frPath = "D:\\software\\FineReport_8.0\\WebReport\\WEB-INF";/*searchXtpz("frPath", "01", conn)*/;// 报表工具安装路径
			String wsbz = "0";
			
			for (String xcbh : xcbhs.split(",")) {
				//查询委托协查函件编号列表
				String zhjbh = "";
				String zhjbhSql = "select zhjbh from XC_STXC_HJXX where XCBH ='" + xcbh + "'";
				ps = conn.prepareStatement(zhjbhSql);
				System.out.println("----查询委托函件编号："+zhjbhSql);
				rs = ps.executeQuery();
				while (rs.next()) {// 判断rs是否为空
					zhjbh = rs.getString("zhjbh");
				}
				
				//查询附件列表
				List<String> fjList = new ArrayList<String>();
				String fjSql = "select distinct(wjm_ys) wjm_ys from XC_WTXC_XCYS_FUJXX t where zhjbh='" + zhjbh + "'";
				ps = conn.prepareStatement(fjSql);
				System.out.println("----查询附件列表："+fjSql);
				rs = ps.executeQuery();
				while (rs.next()) {// 判断rs是否为空
					fjList.add(rs.getString("wjm_ys"));
				}
				
				//查询函件的协查类型，确认虚开要生成虚开文书
				String xclxDm = "";
				String xclxSql = "select XCLX_DM from XC_WTXC_HJXX where zhjbh = '" + zhjbh + "'";
				ps = conn.prepareStatement(xclxSql);
				System.out.println("----查询协查类型："+xclxSql);
				rs = ps.executeQuery();
				while (rs.next()) {// 判断rs是否为空
					xclxDm = rs.getString("XCLX_DM");
				}
				String xkbz = "Y";
				if ("0".equals(xclxDm)) {//不是确定虚开
					xkbz = "N";
				}
				//调接口对文书盖章
				String result = wsPdfSign(wsPDFPath, savePath, xcbh, xkbz, frPath, wsbz);
						
				//保存文书盖章后位置
				String results[] = result.split(",");
				if ("0".equals(results[0])) {//盖章成功
					insertWsxx(xcbh, wsbz, conn);
					insertWsMxxx(results, savePath, xcbh, wsbz, conn);
				}
				
				//调接口对附件盖章
				String fjPaths = "";
				for (String fjPath : fjList) {
					fjPaths += fjPath + ",";
				}
				result = fjPdfSign(fjPaths, savePath, wsPDFPath);
				//保存附件盖章后位置
				if ("0".equals(result)) {//盖章成功
					insertFjMxxx(fjList, savePath, xcbh, wsbz, conn);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeResultSet(rs);
			DBUtil.closePreparedStatement(ps);
			DBUtil.closeConnection(conn);
		}
	}
	
	public static void signStxc(String xcbhs) throws Exception {
		Connection conn = DBUtil.initDs().getConnection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String wsPDFPath = searchXtpz("wsPDFPath", "01", conn);// 查询文书保存路径
			String savePath = searchXtpz("signedPath", "01", conn);// 查询签章后文书保存路径
			String frPath = "D:\\software\\FineReport_8.0\\WebReport\\WEB-INF";/*searchXtpz("frPath", "01", conn);*/// 报表工具安装路径
			String wsbz = "1";
			
			for (String xcbh : xcbhs.split(",")) {
				//查询报告附件列表
				List<String> bgfjList = new ArrayList<String>();
				String bgfjSql = "select distinct(wjm_ys) wjm_ys from XC_STXC_BGXX_FUJXX t where XCBH='" + xcbh + "'";
				ps = conn.prepareStatement(bgfjSql);
				System.out.println("----查询报告附件："+bgfjSql);
				rs = ps.executeQuery();
				while (rs.next()) {// 判断rs是否为空
					bgfjList.add(rs.getString("wjm_ys"));
				}
				
				//查询报告附件列表
				List<String> hffjList = new ArrayList<String>();
				String hffjSql = "select distinct(wjm_ys) wjm_ys from XC_STXC_HFXX_FUJXX t where XCBH='" + xcbh + "'";
				ps = conn.prepareStatement(hffjSql);
				System.out.println("----查询回复附件："+hffjSql);
				rs = ps.executeQuery();
				while (rs.next()) {// 判断rs是否为空
					hffjList.add(rs.getString("wjm_ys"));
				}
				
				//调接口对文书盖章
				String result = wsPdfSign(wsPDFPath, savePath, xcbh, "", frPath, wsbz);
				
				//保存文书盖章后位置
				String results[] = result.split(",");
				if ("0".equals(results[0])) {//盖章成功
					insertWsxx(xcbh, wsbz, conn);
					insertWsMxxx(results, savePath, xcbh, wsbz, conn);
				}
				
				//调接口对附件盖章
				bgfjList.addAll(hffjList);
				String fjPaths = "";
				for (String fjPath : bgfjList) {
					fjPaths += fjPath + ",";
				}
				result = fjPdfSign(fjPaths, savePath, wsPDFPath);
				//保存附件盖章后位置
				if ("0".equals(result)) {//盖章成功
					insertFjMxxx(bgfjList, savePath, xcbh, wsbz, conn);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeResultSet(rs);
			DBUtil.closePreparedStatement(ps);
			DBUtil.closeConnection(conn);
		}
	}
	
	public static String wsPdfSign(String filepath, String savepath, String xcbh, String xkbz, String frPath, String wsbz) throws FileNotFoundException{
		String result = "";
		File filedir = new File(filepath);
		if(!filedir.exists()){  
			filedir.mkdirs();  
        }
		File savedir = new File(savepath);
		if(!savedir.exists()){  
			savedir.mkdirs();  
        }
		String names = "";
		System.out.println("-----------开始cpt文书签章------------");
		if (wsbz.equals("0")) {
			names = cptTopdfWt(xcbh, xkbz, filepath, frPath);
		} else {
			names = cptTopdfSt(xcbh, filepath, frPath);
		}
		
		File file = new File(filepath);
		if (!file.isDirectory()) {
			System.out.println("path=" + file.getPath());
			System.out.println("name=" + file.getName());

		} else if (file.isDirectory()) {
			String[] filelist = file.list();
			for (int i = 0; i < filelist.length; i++) {
				File readfile = new File(filepath + "\\" + filelist[i]);
				if (!readfile.isDirectory()) {
					System.out.println("path=" + readfile.getPath());
					System.out.println("name=" + readfile.getName());
					result = sigh(filepath + "\\" + filelist[i], savepath + "\\" + filelist[i]);
					if ("0".equals(result)) {
						readfile.delete();
					}
				} 
			}
		}
		return result + "," + names;
	}
	
	/**
	 * pdf文件签章
	 */
	public static String fjPdfSign(String fjPaths, String savePath, String fjpdfPath){
		String result = "";
		System.out.println("-----------开始附件签章------------");
		for (String filepath : fjPaths.split(",")) {
			if (!StringUtil.isEmpty(filepath)) {
				String filename = filepath.substring(filepath.lastIndexOf("\\"), filepath.lastIndexOf("."));
				String extend = filepath.substring(filepath.lastIndexOf(".")+1);
				try {
					Conver2Pdf.cover2Pdf(extend,filepath,fjpdfPath,filename);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		File file = new File(fjpdfPath);
		if (!file.isDirectory()) {
			System.out.println("path=" + file.getPath());
			System.out.println("name=" + file.getName());
		} else if (file.isDirectory()) {
			String[] filelist = file.list();
			for (int i = 0; i < filelist.length; i++) {
				File readfile = new File(fjpdfPath + "\\" + filelist[i]);
				if (!readfile.isDirectory()) {
					System.out.println("path=" + readfile.getPath());
					System.out.println("name=" + readfile.getName());
					result = sigh(fjpdfPath + "\\" + filelist[i], savePath + "\\" + filelist[i]);
					if ("0".equals(result)) {
						readfile.delete();
					} else {
						break;
					}
				} 
			}
		}
		return result;
	}
	
	private static String searchXtpz(String pzxm, String xtdm, Connection conn) {
		String result = "";
		String sql = "select xmz from  gg_xtpz where pzxm_dm='" + pzxm + "' and yx_bz='Y' and xt_dm like '%" + xtdm + "%'";
		
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			System.out.println("----查询配置信息："+sql);
			// 遍历ResultSet
			while (rs.next()) {// 判断rs是否为空
				System.out.println(rs.getString("xmz"));
				result = rs.getString("xmz");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return result;
	}
	
	/**
	 * 插入盖章后文件存储信息
	 * @param xcbh
	 * @param wsbz
	 */
	private static void insertWsxx(String xcbh, String wsbz, Connection conn){
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String nsrsbhWtf = "", nsrmcWtf = "";
			String nsrsbhStf = "", nsrmcStf = "";
			String swjgWtf = "", swjgStf = "";
			String hjxxSql = "select NSRSBH_WTF, NSRMC_WTF, NSRSBH_STF, NSRMC_STF, SWJG_DM_WTF, SWJG_DM_STF from XC_STXC_HJXX " +
					"where xcbh='" + xcbh + "'";
			ps = conn.prepareStatement(hjxxSql);
			System.out.println("----查询函件信息："+hjxxSql);
			rs = ps.executeQuery();
			while (rs.next()) {// 判断rs是否为空
				nsrsbhWtf = rs.getString("NSRSBH_WTF");
				nsrmcWtf = rs.getString("NSRMC_WTF");
				nsrsbhStf = rs.getString("NSRSBH_STF");
				nsrmcStf = rs.getString("NSRMC_STF");
				swjgWtf = rs.getString("SWJG_DM_WTF");
				swjgStf = rs.getString("SWJG_DM_STF");
			}
			
			String insertWsxxSql = "insert into XC_WSXX (XCBH,SWJG_DM_WTF,SWJG_DM_STF,WS_BZ,RQ_QZ,NSRSBH_WTF,NSRMC_WTF,NSRSBH_STF,NSRMC_STF)" +
					" values('"+xcbh+"','"+swjgWtf+"','"+swjgStf+"','"+wsbz+"',sysdate,'"+nsrsbhWtf+"','"+nsrmcWtf+"','"
					+nsrsbhStf+"','"+nsrmcStf+"')";
			ps = conn.prepareStatement(insertWsxxSql);
			ps.executeQuery();
			System.out.println("----插入文书信息："+insertWsxxSql);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 保存盖章后文书位置信息
	 * @param results
	 * @param savePath
	 * @param xcbh
	 * @param wsbz
	 */
	private static void insertWsMxxx(String[] results, String savePath, String xcbh, String wsbz, Connection conn){ 
		PreparedStatement ps = null;
		try {
			for (int i=1; i<results.length; i++) {
				String insertWsmxSql = "insert into XC_WSXX_MX (ID,XCBH,WJM_YS,WS_BZ) values ('"+getUUID()+"','"+xcbh+"','"
						+savePath+results[i]+"','"+wsbz+"')";
				ps = conn.prepareStatement(insertWsmxSql);
				System.out.println("----插入文书详细信息："+insertWsmxSql);
				ps.executeQuery();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	/**
	 * 保存附件盖章后位置信息
	 * @param fjList
	 * @param savePath
	 * @param xcbh
	 * @param wsbz
	 */
	private static void insertFjMxxx(List<String> fjList, String savePath, String xcbh, String wsbz, Connection conn){
		PreparedStatement ps = null;
		try {
			for (String fjname : fjList) {
				String name = fjname.substring(fjname.lastIndexOf("\\")+1, fjname.lastIndexOf("."));
				String insertWsmxSql = "insert into XC_WSXX_MX (ID,XCBH,WJM_YS,WS_BZ) values ('"+getUUID()+"','"+xcbh+"','"
						+savePath+name+".pdf','"+wsbz+"')";
				ps = conn.prepareStatement(insertWsmxSql);
				System.out.println("----插入文书详细信息："+insertWsmxSql);
				ps.executeQuery();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	/**
	 * 
	 * @param filepath pdf文件路径
	 * @param savepath 签章保存路径
	 */
	private static String sigh(String filepath, String savepath) {
		String result = "";
		String orgcpde ="11301000000";
		String sealcpde ="52AB3334BBED44C8D5A7D21273388E78";
		boolean TSA_type = false;
		verifySign(filepath);
		result = signByPosition(filepath, savepath, orgcpde,sealcpde, 125, 123, 1, TSA_type,"0", 0.7f);
		return result;
	}
	
	/**
	 * @param xcbh
	 * @param xkbz
	 */
	private static String cptTopdfWt(String xcbh, String xkbz, String filepath, String frPath) {
		String names = "";
		try {
			FRContext.setCurrentEnv(new LocalEnv(frPath));
			ModuleContext.startModule(EngineModule.class.getName()); // ��ȡ�����µ�ģ���ļ�
			Map<String,String> paramap = new HashMap<String,String>();
			paramap.put("xcbh", xcbh);
			// wt
			TemplateWorkBook workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(),"xc//ws//wth.cpt");
			ResultWorkBook result = workbook.execute(paramap, new WriteActor());
			OutputStream outputstream = new FileOutputStream(new File(filepath + xcbh + "_税收违法案件协查函.pdf"));
			PDFExporter PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_税收违法案件协查函.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//wtaj.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_委托协查情况表.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_委托协查情况表.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//wtxcyq.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_委托协查要求表.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_委托协查要求表.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//wtqd.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_委托协查凭证清单.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_委托协查凭证清单.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//wthw.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_委托协查凭证货物清单.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_委托协查凭证货物清单.pdf" + ",";
			
			if (xkbz.equals("Y")) {
				PdfExport.export(outputstream, result);
				workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//xk.cpt");
				result = workbook.execute(paramap, new WriteActor());
				outputstream = new FileOutputStream(new File(filepath + xcbh+ "_已证实虚开通知单.pdf"));
				PdfExport = new PDFExporter();
				PdfExport.export(outputstream, result);
				names += xcbh + "_已证实虚开通知单.pdf" + ",";
			}
			paramap.clear();
			outputstream.close();
			ModuleContext.stopModules();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return names;
	}

	/**
	 * 
	 * @param xcbh
	 * @param filepath
	 * @param frPath
	 * @return
	 */
	private static String cptTopdfSt(String xcbh, String filepath, String frPath) {
		String names = "";
		try {
//			String envpath = "F:\\FineReport_8.0\\WebReport\\WEB-INF";
			FRContext.setCurrentEnv(new LocalEnv(frPath));
			ModuleContext.startModule(EngineModule.class.getName()); // ��ȡ�����µ�ģ���ļ�
			// ���屣������map������ִ�б���
			Map<String,String> paramap = new HashMap<String,String>();
			paramap.put("xcbh", xcbh);
			// wt
			TemplateWorkBook workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(),"xc//ws//sth.cpt");
			ResultWorkBook result = workbook.execute(paramap, new WriteActor());
			OutputStream outputstream = new FileOutputStream(new File(filepath + xcbh + "_税收违法案件协查回复函.pdf"));
			PDFExporter PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_税收违法案件协查回复函.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//sthw.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_协查结果反馈货物清单.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_协查结果反馈货物清单.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//stqd.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_协查结果反馈清单.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_协查结果反馈清单.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//stxcbg.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_税务稽查案件协查报告.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_税务稽查案件协查报告.pdf" + ",";
			
			workbook = TemplateWorkBookIO.readTemplateWorkBook(FRContext.getCurrentEnv(), "xc//ws//stxcqk.cpt");
			result = workbook.execute(paramap, new WriteActor());
			outputstream = new FileOutputStream(new File(filepath + xcbh+ "_受托协查情况表.pdf"));
			PdfExport = new PDFExporter();
			PdfExport.export(outputstream, result);
			names += xcbh + "_受托协查情况表.pdf" + ",";
			
			paramap.clear();
			outputstream.close();
			ModuleContext.stopModules();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return names;
	}
	
	/**
	 * 
	 * @param suroce_path
	 * @param temp_path
	 * @param username
	 * @param pwd
	 * @param xPosition
	 * @param yPosition
	 * @param pageNum
	 * @param flag
	 * @param sealType
	 * @param opacity
	 * @return
	 */

	private static String signByPosition(String suroce_path, String temp_path,
			String username, String pwd, float xPosition, float yPosition,
			int pageNum, boolean flag, String sealType, float opacity) {
		String code2 ="";
		if (sealType == "") {
			code2 = NXServerSignShellUtils.pdfSgin(suroce_path, temp_path,
				username, pwd, xPosition, yPosition, pageNum, flag, 
				opacity);
		}else {
			code2 = NXServerSignShellUtils.pdfSgin(suroce_path, temp_path,
					username, pwd, xPosition, yPosition, pageNum, flag, sealType,
					opacity);
		}
		return code2;
	}

	private static void verifySign(String tempPdfPath) {
		NXServerSignShell signShell = new NXServerSignShell();
		signShell.verifySign(tempPdfPath, "#rsa1");
	}
}
